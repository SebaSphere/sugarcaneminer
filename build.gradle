buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/maven" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

def mcVersion = project.mc_version

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"


version = project.version
group = "dev.sebastianb.sugarcaneminer"
archivesBaseName = "SugarCaneMiner"
sourceCompatibility = targetCompatibility = 1.8

minecraft {
    version = "${forge_version}"
    runDir = "run"
    mappings = "${mcp_mapping}"
    makeObfSourceJar = false

    replace "@FINGERPRINT@", project.findProperty('signSHA1')

    def args = [
            "-Dfml.coreMods.load=dev.sebastianb.sugarcaneminer.mixin.MixinLoaderForge",
            "-Dmixin.debug.export=true",
            "-Dmixin.debug.verbose=true"

    ]

    clientJvmArgs.addAll(args)
    serverJvmArgs.addAll(args)

    clientRunArgs += "--mixin mixins.tweaklib.json"
    serverRunArgs += "--mixin mixins.tweaklib.json"

}

configurations {
    embed
    implementation.extendsFrom(embed)
}



dependencies {
    embed("org.spongepowered:mixin:0.7.11-SNAPSHOT") { transitive = false }

    compile 'com.github.cabaletta:baritone:1.2.14'
    compile 'cabaletta:baritone-api:1.2'
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url = "http://repo.spongepowered.org/maven/"
    }
    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
}

//sourceSets {
//    main {
//        ext.refMap = "mixins.tweaklib.refmap.json"
//    }
//}
mixin {
    defaultObfuscationEnv searge

}

jar {
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "LICENSE.txt", "META-INF/*.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }
    manifest {
        attributes("FMLCorePluginContainsFMLMod": "true",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                'TweakOrder': 0,
                "FMLCorePlugin": "dev.sebastianb.sugarcaneminer.mixin.MixinLoaderForge",
                "ForceLoadAsMod": "true"
        )
    }
    baseName = "SugarCaneMiner-" + mcVersion
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    baseName = "SugarCaneMiner-" + mcVersion
    classifier = "sources"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "LICENSE.txt", "META-INF/*.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }
    manifest {
        attributes("FMLCorePluginContainsFMLMod": "true",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                'TweakOrder': 0,
                "FMLCorePlugin": "dev.sebastianb.sugarcaneminer.mixin.MixinLoaderForge",
                "ForceLoadAsMod": "true"
        )
    }
    baseName = "SugarCaneMiner-" + mcVersion
    classifier = "deobf"
}

artifacts {
    archives sourcesJar
    archives deobfJar
}



task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath

}

build.dependsOn signJar